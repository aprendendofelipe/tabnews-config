name: Automated Tests

on: pull_request

concurrency:
  group: tests-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  vitest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node:
          - version: 20
        os:
          - ubuntu-latest
          - windows-latest

    name: 'Vitest Node-${{ matrix.node.version }}, ${{ matrix.os }}'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node.version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check for uncommitted changes after npm install
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git status --porcelain
            echo "Uncommitted changes found. Please review and commit these changes if necessary."
            exit 1
          else
            echo "No uncommitted changes found"
          fi
        shell: bash
        if: runner.os != 'Windows'

      - name: Check for uncommitted changes after npm install (Windows)
        run: |
          $status = git status --porcelain
          if ($status) {
            git status --porcelain
            echo "Uncommitted changes found. Please review and commit these changes if necessary."
            exit 1
          } else {
            echo "No uncommitted changes found"
          }
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Run Vitest
        run: pnpm test:run

      - name: Check for uncommitted changes after tests
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git status --porcelain
            echo "Uncommitted changes found. Please review and commit these changes if necessary."
            exit 1
          else
            echo "No uncommitted changes found"
          fi
        shell: bash
        if: runner.os != 'Windows'

      - name: Check for uncommitted changes after tests (Windows)
        run: |
          $status = git status --porcelain
          if ($status) {
            git status --porcelain
            echo "Uncommitted changes found. Please review and commit these changes if necessary."
            exit 1
          } else {
            echo "No uncommitted changes found"
          }
        shell: pwsh
        if: runner.os == 'Windows'
